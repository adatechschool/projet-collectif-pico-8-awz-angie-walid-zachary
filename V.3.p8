pico-8 cartridge // http://www.pico-8.com
version 38
__lua__
--player variable
	score=0
	gravity=0.3
	friction=0.8
	state=1
function _init()
	player={
		sp=1,
		x=14,
		y=90,
		w=8,
		h=8,
		flp=false,
		dx=0,
		dy=0,
		max_dx=2,
		max_dy=3,
		acc=0.5,
		boost=4,
		anim=0,
		running=false,
		jumping=false,
		falling=false,
		sliding=false,
		landed=false,
		health=3,
		cooldown=0
		}
		
	mn1={
		x=80,
		y=96,
		w=8,
		h=8,
		dir="right",
		flp=false,
		sp=49,
		etat=true
}

		mn2={
		x=60,
		y=96,
		w=8,
		h=8,
		dir="right",
		flp=false,
		sp=49,
		etat=true
}
 mn3={
		 x=192,
		 y=96,
		 w=8,
		 h=8,
		 dir="right",
		 flp=false,
		 sp=49,
		 etat=true
}

	
	--simple camera
	cam_x=0
	cam_y=0
	
	--map limits
	map_start=0
	map_end=1024
	
	-----------test--------
	x1r=0 y1r=0 x2r=0 y2r=0
	collide_l="no"
	collide_r="no"
	collide_u="no"
	collide_d="no"
	-----------------------
	
end

-->8
--game state
function _update()
		if (state==1) then
	   game_start()
	 else 
	   game_over()
    end
	
	--simple cam
	cam_x=player.x-64+(player.w/2)
	if cam_x<map_start then
			cam_x=map_start
	elseif cam_x>map_end-128 then
			cam_x=map_end-128
	end
	if player.y>140 then
			cam_y=100
	elseif cam_x>map_end-128 then
			cam_x=map_end-128
	end
	
	camera(cam_x,cam_y)
end

function mechants()
  ennemie_m(mn1)
  ennemie_m(mn2)
  ennemie_m(mn3)
  over(mn1,player)
  over(mn2,player)
  over(mn3,player)
end

function _draw()
	 if (state==1) then
  draw_start()
  else 
  draw_end() 
  end
end

function drawmechants()
		draw_ennemie(mn1)
	 draw_ennemie(mn2)
  draw_ennemie(mn3)
end

-->8
--collision
function collision(obj,aim,flag)
	--obj = table need x,y,w,h
	--aim = left,right,up,down,self
	local x=obj.x  local y=obj.y
	local w=obj.w  local h=obj.h
	
	local x1=0 local y1=0
	local x2=0 local y2=0

 if aim=="left" then	
 		x1=x-1      y1=y
 		x2=x        y2=y+h-1
 
 elseif aim=="right" then
 		x1=x+w-1    y1=y
 		x2=x+w      y2=y+h-1 
	
	elseif aim=="up" then
 		x1=x+2      y1=y-1
 		x2=x+w-3    y2=y
	
	elseif aim=="down" then
 		x1=x+2      y1=y+h
 		x2=x+w-3    y2=y+h
 		
 elseif aim=="self" then
 		x1=x          y1=y
			x2=x          y2=y

	end
	
	--------test-------------
	x1r=x1  y1r=y1
	x2r=x2  y2r=y2
	-------------------------
	
	

	--pixels to tiles
	x1/=8  y1/=8
	x2/=8  y2/=8
	
	if fget(mget(x1,y1), flag)
	or fget(mget(x1,y2), flag)
	or fget(mget(x2,y1), flag)
	or fget(mget(x2,y2), flag) then
	 	return true
 	else
	 	return false
 	end
	
	
	
end
-->8
--player
function pick()
  if (collision(player,"self",2)) then
    pick_coin(player.x/8,player.y/8)
  end
end

function player_m()
		 if (collision(player,"down",3)) then
		 friction=0.6
		 player.boost=2
		 elseif (collision(player,"down",4)) then
		 friction=0.92
		 player.max_dx=5
		 player.boost=5
		 elseif (player.cooldown==0) and (collision(player,"up",5)) then
		 player.health-=1
	  player.cooldown+=150
	   if player.health==0 then
	     state = 0
	   end
		 else
		 state=1
		 player.boost=4
		 friction=0.8
		 player.max_dx=5
end

		--physics
		player.dy+=gravity
		player.dx*=friction
		
		--controls
		if btn(‚¨ÖÔ∏è) then
			player.dx-=player.acc
			player.running=true
			player.flp=true
		end
  if btn(‚û°Ô∏è) then
			player.dx+=player.acc
			player.running=true
			player.flp=false
		end
		
		--slide
		if player.running
		and not btn(‚û°Ô∏è)
		and not btn(‚¨ÖÔ∏è)
		and not player.jumping
		and not player.falling then
				player.running=false
				player.sliding=true 
		end
		
		--jump
		if btnp(‚ùé)
		and (player.landed) then
		 player.dy-=player.boost
		 player.landed=false
		end
		
		--check collision up and down
		if player.dy>0 then
				player.jumping=false 
				player.landed=false
				player.falling=true
				
				player.dy=limit_speed(player.dy,player.max_dy)
				
				if collision(player,"down",0) then
				player.landed=true
				player.falling=false
				player.dy=0
		  player.y-=((player.y+player.h+1)%8)-1
				---------test-----------
				collide_d="yes"
				else 
				collide_d="no"
				-------------------------
				end
		elseif player.dy<0 then
				player.jumping=true 
				if collision(player,"up",1) then
						player.dy=0
				
				----------test-----------
				collide_u="yes"
				else 
				collide_u="no"
				-------------------------
				
				end	
  end
  
  --check collision left and right
 	if player.dx<0 then			
				if collision(player,"left",1) then
			   player.dx=0
				--------test-------------
				collide_l="yes"
				else 
				collide_l="no"
				------------------------	
				player.dx=limit_speed(player.dx,player.max_dx)
				end
		elseif player.dx>0 then
				if collision(player,"right",1) then
						player.dx=0
				---------test------------
				collide_r="yes"
				else 
				collide_r="no"
				-------------------------
				end
   player.dx=limit_speed(player.dx,player.max_dx)
   end
   
   --stop slidding
   if player.sliding then
   		if abs(player.dx)<.2
   		or player.running then
   				player.dx=0
   				player.sliding=false
   				player.sp=1
   		end
   end		
		player.x+=player.dx
		player.y+=player.dy
		
		--limit player to map
		if player.x<map_start then
				player.x=map_start
		end	
		if player.x>map_end-player.w then
				player.x=map_end-player.w
		end		
end

function player_a()
	 if player.jumping then
	 		player.sp=7
	 elseif player.falling then
	 		player.sp=8
	 elseif player.sliding then
	 		player.sp=9
	 elseif player.running then 
	   if time()-player.anim>.1 then
	     player.anim=time()
	     player.sp+=1
	     if player.sp>6 then
	       player.sp=3
	     end
	   end
	 else --player idle
	   if time()-player.anim>0.1 then
	   	 player.anim=time()
	   	 player.sp+=1.2
	   	 if player.sp>2 then
	   	 		player.sp=1 
      end  
	   end
  end
end

function limit_speed(num,maximum)
		return mid(-maximum,num,maximum)
end
-->8
--pick up

function next_tile(x,y)
	  sprite=mget(x,y)
	  mset(x,y,sprite+1)
end
function pick_coin(x,y)
		next_tile(x,y)
		score+=1
end
-->8
--draw + update
--pour update
function game_start()
 	player_m()
  player_a()
  mechants()
end

function game_over()
	if btn(üÖæÔ∏è) then
   cls()
   _init()
   state = 1
 end
end

--pour draw

function draw_start()
  cls()
	 map(0,0)
	 print("score "..score,cam_x,0,1)
		if player.health > 2  then spr(43,cam_x+100,0) end
	 if player.health > 1 then spr(43,cam_x+110,0) end
	 if player.health > 0 then spr(43,cam_x+120,0) end
	 --print("cd "..player.cooldown,cam_x,20,1)	 
	 if (player.cooldown/5)%2 == 0 then
		spr(player.sp,player.x,player.y,1,1,player.flp)
	 end
	 pick()
	 drawmechants()
  -----test----------
  --test()  
  --------------------
end

function draw_end()
map()
rectfill(cam_x+34,42,cam_x+94,92,0)
rectfill(cam_x+29,37,cam_x+89,87,1)
print("vous avez \nmarquer "..score.."\npoints",cam_x+30,44,0)
print("press üÖæÔ∏è pour \nreset",cam_x+30,74,0)
end


-->8
--ennemie !!!
function draw_ennemie(monster)
  spr(monster.sp,monster.x,monster.y,1,1,monster.flp)
		 
end


function ennemie_m(monster)
  if (monster.etat==true) then
    if (collision(monster,"right",1)==true)then
    monster.dir = "left"
    monster.flp = true
    elseif (collision(monster,"left",0)==true)then
    monster.dir = "right"
    monster.flp = false
    end
  
    if (monster.dir=="right") monster.x+=1
    if (monster.dir=="left") monster.x-=1
		else
		end
end

function over(monster,obj)

  local a=obj.x  local b=obj.y
	
	 local a1=a+2 local b1=b+8
	 local a2=a+5 local b2=b+8

  local x=monster.x  local y=monster.y
		
  local x1=x      local y1=y
  local x2=x+8    local y2=y+8
		
		x1p=x1  y1p=y1-2
 	x2p=x2  y2p=y2-10
  
  if (player.cooldown==0) and (monster.etat==true) and  (a1>x1-1) and (a2<x2+2)
		  and (b1>y1) and (b2<y2-2) then
    player.dy-=6.3
    monster.sp+=1
    monster.etat=false
    score+=5
		elseif (monster.etat==true) and  (player.x+4>x1) and (player.x<x2)
		  and (player.y+4>y1) and (player.y<y2) 	
		  and (player.cooldown==0) then
		  player.health-=1
	   player.cooldown+=150
	   if player.health==0 then
	   state = 0
	   end
  end
		if player.cooldown>0 then
 	player.cooldown-=1
  end
end
-->8
function test()
  rect(x1r,y1r,x2r,y2r,7)
  rect(x1p,y1p,x2p,y2p,7)
  print("y "..player.y,cam_x+100,0)
  print("x "..player.x,cam_x+100,10)
  print("dx "..player.dx,cam_x+100,20)
  print("dy "..player.dy,cam_x+100,30)
  print("‚¨ÖÔ∏è= "..collide_l,player.x,player.y-10)
  print("‚û°Ô∏è= "..collide_r,player.x,player.y-18)
  print("‚¨ÜÔ∏è= "..collide_u,player.x,player.y-26)
  print("‚¨áÔ∏è= "..collide_d,player.x,player.y-34)
end
__gfx__
00000000004444400044444000044444000444440004444400044444000444440004444400000000000000000066600000000000444444440000000000000000
0000000000ccccc000ccccc00ccccccc0c0ccccc0ccccccc0c0ccccc00cccccc00cccccc044444000000000000666000bb000000444444440000000000000000
007007000cf08f800cf72f80c00ff72fc0cff72fc00ff72fc0cff72f0c0ff72f0c0ff72f0ccccc000000000000666000bbbb0000444444440000000000000000
000c70000cfffff00cfffef0000ffffe000ffffe000ffffe000ffffec00ffffec00ffffecf72f8000000000000666000bbbbbb00444444440000000000000000
0007ccc0000cc00000cccc000fccc0000fccc0000fccc0000fccc0000fccc0000000ccc0cfffef000000000000666000bbbbbbb0444444440000000000000000
0070070000cccc000f0cc0f0000cc000000cc000000cc000000cc000000cc0000000cc0f00ccccf00000000000666000bbbbb000444444440000000000000000
000000000f0cd0f0000cd0000cc0d00000cd00000dd0c00000dc000000dc000000000cd00f0ccd000000000000666000bb000000444444440000000000000000
0000000000c00d0000c00d000000d00000cd00000000c00000dc00000dc00000000000cd0000ccdd000000000066600000000000444444440000000000000000
00000000cccccccc00000000333333334444444444444444aaaaaaaacccccccc0000000000066666000000000888888000000000000000000000000000000000
00000000cccccccc00000000333333334444444444444444aaaaaaaacccccccc0000600000006666000000008888888800000000000000000000000000000000
00000000cccccccc000000003333333344444444444444449aaaaaa97cccccc70000600006666666000000008888888800000000000000000000000000000000
00000000cccccccc0000000044444444444444444444444449999994477777746000600600000066000000008888888800000000000000000000000000000000
00000000cccccccc0000000044444444000000004444444444444444444444446060660600006666000000008888888800000000000000000000000000000000
00000000cccccccc0000000044444444000000004444444444444444444444446660660600000066000000008888888800000000000000000000000000000000
00000000cccccccc0000000044444444000000004444444444444444444444446666660666666666000000008888888800000000000000000000000000000000
00000000cccccccc0000000044444444000000004444444444444444444444446666666600066666000000000888888000000000000000000000000000000000
00000000000000000000000000000000ff4ff4ff0000000000000000000000006000000066666666000000000000000000000000000000000000000000000000
00000000000aa0000000000000000000ff4ff4ff0000000000000000000000006600000060666666000000000780078000000000000000000000000000000000
0000000000aa9a000000000000000000f4ff4ff40000000000000000000000006666000060666666000000007888788800000000000000000000000000000000
0000000000aa9a000000000000000000f4ff4ff40000000000000000000000006000000060666606000000007888888800000000000000000000000000000000
0000000000aa9a000000000000000000000000000000000000000000000000006666666660066006000000000788888000000000000000000000000000000000
0000000000a99a000000000000000000000000000000000000000000000000006660000060006006000000000078880000000000000000000000000000000000
00000000000aa0000000000000000000000000000000000000000000000000006000000000006000000000000007800000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000006666660000000000000000000000000000000000000000000000000000000000
00000000000440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000004444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440004400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000444444440004400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000002a2a000044440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000002222004444444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000002222004444444400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
000000000000000000000000000300000000000301030b132020000004000000000400040100000020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001515
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001515
1500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001515
1500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001515
1500000000000000000000000000002121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001515
1500000000000000000021000000002121212121210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001515
1500000000000000000000000000001313131313130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001515
1500000000000000000018181313280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001515
1500000000000000001913131313280000000000000000000013131313131300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001515
1500000000000000001913131313280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001515
150000000000000000000000000000000000000000000000000000000000000019130d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001515
1800000021212121000000000000000000000000000019150013131313131300190d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001515
1800130000000000130000000013000000000000000019152121212121212121190d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001515
1313131313131313131313131313131818181818131313151313131313131313131313131313131313131300000013131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131315
0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d130000000d0d0d0d0d0d0d0d0d0d0d0d0d0d0d00000000000000000013131313131313131313131313130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d130000000d0d0d0d0d0d0d0d0d0d0d0d0d0d0d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d130000000d0d0d0d0d0d0d0d0d0d0d0d0d0d0d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d212121212121212121212121212100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d212121212121212121212121212100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d212121212121212121212121212100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d151515151515151515151315151515151515151515151515151515151515151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d151515151515151515151315151515151515151515151515151515151515151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0013131313131313131313131313130000000000000000000000000000000000151515151515151515151315151515151515151515151515151515151515151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1313131313130000000013131313131313131313131313131313131313131313131313151515151515151315151515151515151515151515151515151515151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0013131313131313131313000000000000000000000000000000000000000000151515151515151515151315151515151515151515151515151515151515151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000151515151515151515151515151515151515151515151515151515151515151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000151515151515151515151515151515151515151515151515151515151515151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000151515151515151515151515151515151515151515151515151515151515151515151515151515151515000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
01070000295052c7052d4052d5052d5052b705257051b705170051700518005190051d005220052d0050000500005000050000500005000050000500005000050000500000000000000000000000000000000000
01100000000000000000000000000000000000000002700039000290002b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
